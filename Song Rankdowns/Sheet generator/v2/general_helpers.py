from typing import List, Tuple, Union, Dict, Any


def get_color_ranges(songs: List[str], colors: List[str]) -> List[str]:
    """
    You provide a length and a list of colors and it generates a list of colors that repeats the colors in the list.
    
    For example:
    `get_color_ranges(5, ['red', 'blue', 'green'])`
    
    returns `['red', 'blue', 'blue', 'green', 'green']`
    
    """
    length = len(songs)

    colors_copy = colors.copy()
    colors_copy.reverse()
    color_list = []
    for i in range(length):
        color_list.append(colors_copy[i % len(colors_copy)])

    final_list = []
    jumpy_index = 0
    tracker = 0
    for i in range(length):
        if jumpy_index >= length:
            tracker += 1
            jumpy_index = tracker 

        final_list.append(color_list[jumpy_index])

        jumpy_index += len(colors_copy)

    final_list.reverse()
    return final_list


def get_color_ranges_with_specials(songs: List[str], colors: List[str], specials: List[str]) -> List[str]:
    """
    Attaches a list of special colors to the end of the list of colors generated by `get_color_ranges`.
    """
    return get_color_ranges(songs[:-3], colors) + specials

# without the nominations space
def get_decision_indexes(r, c, general_colors, top3_colors, color_ranges, users):
    gap = 2
    row_step = 1 + len(users) + 1 + gap
    col_step = 3

    indexes = []

    # idk which for loop is better
    for i, color in enumerate(general_colors):
        target_col = c + col_step *i

        how_many_colors = color_ranges.count(color)

        for j in range(how_many_colors):
            target_row = r + row_step * j
            indexes.append((target_row, target_col))

    # appending the special colors
    for _ in range(len(top3_colors)):
        target_row += row_step
        indexes.append((target_row, target_col))

    """
    target_col = c
    for color in general_colors:
        how_many_colors = color_ranges.count(color)

        for target_row in range(r, r + row_step * how_many_colors, row_step):
            indexes.append((target_row, target_col))

        target_col += col_step
    target_col -= col_step

    specials_row = target_row + row_step

    for target_row in range(specials_row, specials_row + row_step * len(top3_colors), row_step):
        indexes.append((target_row, target_col))
    """
        
    return indexes

def get_nomination_indexes(r, c, general_colors):
    col_step = 3

    indexes = []

    for i in range(c, c + col_step * len(general_colors) , col_step):
        print("added")
        indexes.append((r, i))

    return indexes

def get_border_columns(nom_indexes):
    return [c[1] + 2 for c in nom_indexes]

